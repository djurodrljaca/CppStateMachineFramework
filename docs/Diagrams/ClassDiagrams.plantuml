@startuml StateMachine
StateMachine *-- "1..*" State
StateMachine *-- InitialTransition
StateMachine *-- "0..*" Event

State *-- "0..*" StateTransition
State *-- "0..*" InternalTransition

Event *-- EventParameter

class StateMachine {
    -states
    -initialTransition
    -validationStatus
    -started
    -currentState
    -eventQueue
    -finalEvent

    +validationStatus()
    +validate()
    +isStarted()
    +start(event)
    +start(eventName, eventParameter)
    +stop()
    +currentState()
    +finalStateReached()
    +hasFinalEvent()
    +takeFinalEvent()
    +hasPendingEvents()
    +addEventToFront(event)
    +addEventToFront(eventName, eventParameter)
    +addEventToBack(event)
    +addEventToBack(eventName, eventParameter)
    +processNextEvent()
    +addState(name, entryAction, exitAction)
    +initialState()
    +setInitialTransition(initialState, action)
    +addStateTransition(fromState, trigger, toState, action, guard)
    +addInternalTransition(state, trigger, actionguard, )
    +setDefaultTransition(fromState, toState, action, guard)
    +setDefaultTransition(state, action, guard)
    -traverseStates(state, statesReached)
    -executeInitialTransition(event)
    -executeStateTransition(transitionData, event)
    -executeInternalTransition(transitionData, event)
}

class State {
    +entryAction
    +exitAction
    +stateTransitions
    +internalTransitions
    +defaultStateTransition
    +defaultInternalTransition
}

class InitialTransition {
    +state
    +action
}

class StateTransition {
    +state
    +guard
    +action
}

class InternalTransition {
    +guard
    +action
}

class Event {
    -name
    -parameter

    +name()
    +hasParameter()
    +parameter()
}

interface EventParameter {
}
@enduml
